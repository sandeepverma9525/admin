import React, { useState } from 'react';
import { initialEpinsData } from '../JsonData/initialData';
import SearchBar from './common/SearchBar';
import Tabs from './common/Tabs';
import EpinTable from './EpinTable';
import TransactionTable from './TransactionTable';
import GenerateModal from './GenerateEpinModal';
import TransferModal from './TransferEpinModal';
import './epinCenter.css';


// ! /JsonData/initialData 
// epins: [
//     { id: 'EP12345', amount: 100, generatedOn: '2023-04-20', status: 'unused', transferredTo: null },
//     { id: 'EP12346', amount: 50, generatedOn: '2023-04-19', status: 'used', usedBy: 'John Doe', usedOn: '2023-04-19' },
//     { id: 'EP12347', amount: 200, generatedOn: '2023-04-15', status: 'unused', transferredTo: null },
//     { id: 'EP12348', amount: 100, generatedOn: '2023-04-14', status: 'transferred', transferredTo: 'Alice Smith', transferredOn: '2023-04-14' },
//     { id: 'EP12349', amount: 500, generatedOn: '2023-04-10', status: 'unused', transferredTo: null },
//   ],
//   transactions: [
//     { id: 'T1001', epinId: 'EP12346', type: 'used', amount: 50, date: '2023-04-19', details: 'Used by John Doe' },
//     { id: 'T1002', epinId: 'EP12348', type: 'transfer', amount: 100, date: '2023-04-14', details: 'Transferred from You to Alice Smith' },
//     { id: 'T1003', epinId: 'EP12345', type: 'generated', amount: 100, date: '2023-04-20', details: 'Generated by You' },
//     { id: 'T1004', epinId: 'EP12347', type: 'generated', amount: 200, date: '2023-04-15', details: 'Generated by You' },
//     { id: 'T1005', epinId: 'EP12349', type: 'generated', amount: 500, date: '2023-04-10', details: 'Generated by You' },
//   ]

const EpinCenter = () => {
  const [activeTab, setActiveTab] = useState('all');
  const [showGenerateModal, setShowGenerateModal] = useState(false);
  const [showTransferModal, setShowTransferModal] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [epinsData, setEpinsData] = useState(initialEpinsData);
  
  // Form states for generate modal
  const [generateAmount, setGenerateAmount] = useState(50);
  const [generateQuantity, setGenerateQuantity] = useState(1);
  
  // Form states for transfer modal
  const [selectedEpin, setSelectedEpin] = useState('');
  const [transferTo, setTransferTo] = useState('');
  const [transferNote, setTransferNote] = useState('');
  
  // Filter epins based on active tab and search query
  const filteredEpins = epinsData.epins.filter(epin => {
    const matchesSearch = epin.id.toLowerCase().includes(searchQuery.toLowerCase());
    if (!matchesSearch) return false;
    
    switch (activeTab) {
      case 'unused': return epin.status === 'unused';
      case 'used': return epin.status === 'used' || epin.status === 'transferred';
      case 'all': return true;
      default: return true;
    }
  });

  // Get unused epins for transfer modal
  const unusedEpins = epinsData.epins.filter(epin => epin.status === 'unused');

  const handleGenerateEpin = () => {
    const newEpins = [];
    const newTransactions = [];
    
    for (let i = 0; i < generateQuantity; i++) {
      const newId = `EP${Math.floor(10000 + Math.random() * 90000)}`;
      const today = new Date().toISOString().split('T')[0];
      
      // Create new epin
      newEpins.push({
        id: newId,
        amount: generateAmount,
        generatedOn: today,
        status: 'unused',
        transferredTo: null
      });
      
      // Create transaction record
      newTransactions.push({
        id: `T${Math.floor(1000 + Math.random() * 9000)}`,
        epinId: newId,
        type: 'generated',
        amount: generateAmount,
        date: today,
        details: 'Generated by You'
      });
    }
    
    // Update state with new epins and transactions
    setEpinsData({
      epins: [...epinsData.epins, ...newEpins],
      transactions: [...epinsData.transactions, ...newTransactions]
    });
    
    setShowGenerateModal(false);
    setGenerateAmount(50);
    setGenerateQuantity(1);
  };

  const handleTransferEpin = () => {
    if (!selectedEpin || !transferTo) return;
    
    const today = new Date().toISOString().split('T')[0];
    
    // Update epin status
    const updatedEpins = epinsData.epins.map(epin => {
      if (epin.id === selectedEpin) {
        return {
          ...epin,
          status: 'transferred',
          transferredTo: transferTo,
          transferredOn: today
        };
      }
      return epin;
    });
    
    // Find the epin to get the amount
    const epin = epinsData.epins.find(e => e.id === selectedEpin);
    
    // Create new transaction
    const newTransaction = {
      id: `T${Math.floor(1000 + Math.random() * 9000)}`,
      epinId: selectedEpin,
      type: 'transfer',
      amount: epin ? epin.amount : 0,
      date: today,
      details: `Transferred from You to ${transferTo}${transferNote ? ` (${transferNote})` : ''}`
    };
    
    // Update state
    setEpinsData({
      epins: updatedEpins,
      transactions: [...epinsData.transactions, newTransaction]
    });
    
    setShowTransferModal(false);
    setSelectedEpin('');
    setTransferTo('');
    setTransferNote('');
  };

  return (
    <div className="epin-center">
      {/* Header with buttons */}
      <div className="epinheader">
        <h1 className="epintitle">E-Pin Management</h1>
        <div className="epinheader-buttons">
          <button 
            className="epinbtn-primary generate-btn"
            onClick={() => setShowGenerateModal(true)}
          >
            {/* <span className="btn-icon">⚡</span> */}
             Generate E-Pin
          </button>
          <button 
            className="epinbtn-secondary"
            onClick={() => setShowTransferModal(true)}
          >
            {/* <span className="btn-icon">↗</span>  */}
            Transfer E-Pin
          </button>
        </div>
      </div>
      
      {/* Search bar */}
      <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />
      
      {/* Tab buttons */}
      <Tabs activeTab={activeTab} setActiveTab={setActiveTab} />
      
      {/* Content based on active tab */}
      {activeTab === 'transactions' ? (
        <TransactionTable transactions={epinsData.transactions} />
      ) : (
        <EpinTable epins={filteredEpins} activeTab={activeTab} />
      )}
      
      {/* Generate E-Pin Modal */}
      <GenerateModal 
        show={showGenerateModal}
        onClose={() => setShowGenerateModal(false)}
        generateAmount={generateAmount}
        setGenerateAmount={setGenerateAmount}
        generateQuantity={generateQuantity}
        setGenerateQuantity={setGenerateQuantity}
        handleGenerateEpin={handleGenerateEpin}
      />
      
      {/* Transfer E-Pin Modal */}
      <TransferModal 
        show={showTransferModal}
        onClose={() => setShowTransferModal(false)}
        selectedEpin={selectedEpin}
        setSelectedEpin={setSelectedEpin}
        transferTo={transferTo}
        setTransferTo={setTransferTo}
        transferNote={transferNote}
        setTransferNote={setTransferNote}
        handleTransferEpin={handleTransferEpin}
        unusedEpins={unusedEpins}
      />
    </div>
  );
};

export default EpinCenter;