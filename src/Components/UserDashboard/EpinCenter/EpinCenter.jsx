
import React, { useState } from 'react';
import SearchBar from './common/SearchBar';
import Tabs from './common/Tabs';
import EpinTable from './EpinTable';
import TransactionTable from './TransactionTable';
import GenerateModal from './GenerateEpinModal';
import TransferModal from './TransferEpinModal';
import './epinCenter.css';

const EpinCenter = () => {
  const [activeTab, setActiveTab] = useState('all');
  const [showGenerateModal, setShowGenerateModal] = useState(false);
  const [showTransferModal, setShowTransferModal] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');

  // Initialize with empty epins and transactions
  const [epinsData, setEpinsData] = useState({
    epins: [],
    transactions: []
  });

  const [generateAmount, setGenerateAmount] = useState(50);
  const [generateQuantity, setGenerateQuantity] = useState(1);

  const [selectedEpin, setSelectedEpin] = useState('');
  const [transferTo, setTransferTo] = useState('');
  const [transferNote, setTransferNote] = useState('');

  const filteredEpins = epinsData.epins.filter(epin => {
    const matchesSearch = epin.id.toLowerCase().includes(searchQuery.toLowerCase());
    if (!matchesSearch) return false;
    switch (activeTab) {
      case 'unused': return epin.status === 'unused';
      case 'used': return epin.status === 'used' || epin.status === 'transferred';
      default: return true;
    }
  });

  const unusedEpins = epinsData.epins.filter(epin => epin.status === 'unused');

  const handleGenerateEpin = () => {
    const newEpins = [];
    const newTransactions = [];
    const today = new Date().toISOString().split('T')[0];

    for (let i = 0; i < generateQuantity; i++) {
      const newId = `EP${Math.floor(10000 + Math.random() * 90000)}`;
      newEpins.push({
        id: newId,
        amount: generateAmount,
        generatedOn: today,
        status: 'unused',
        transferredTo: null
      });
      newTransactions.push({
        id: `T${Math.floor(1000 + Math.random() * 9000)}`,
        epinId: newId,
        type: 'generated',
        amount: generateAmount,
        date: today,
        details: 'Generated by You'
      });
    }

    setEpinsData(prev => ({
      epins: [...prev.epins, ...newEpins],
      transactions: [...prev.transactions, ...newTransactions]
    }));

    setShowGenerateModal(false);
    setGenerateAmount(50);
    setGenerateQuantity(1);
  };

  const handleTransferEpin = () => {
    if (!selectedEpin || !transferTo) return;

    const today = new Date().toISOString().split('T')[0];
    const epin = epinsData.epins.find(e => e.id === selectedEpin);

    const updatedEpins = epinsData.epins.map(epin =>
      epin.id === selectedEpin
        ? { ...epin, status: 'transferred', transferredTo: transferTo, transferredOn: today }
        : epin
    );

    const newTransaction = {
      id: `T${Math.floor(1000 + Math.random() * 9000)}`,
      epinId: selectedEpin,
      type: 'transfer',
      amount: epin ? epin.amount : 0,
      date: today,
      details: `Transferred from You to ${transferTo}${transferNote ? ` (${transferNote})` : ''}`
    };

    setEpinsData({
      epins: updatedEpins,
      transactions: [...epinsData.transactions, newTransaction]
    });

    setShowTransferModal(false);
    setSelectedEpin('');
    setTransferTo('');
    setTransferNote('');
  };




  

  return (
    <div className="epin-center">
      <div className="epinheader">
        <h1 className="epintitle">E-Pin Management</h1>
        <div className="epinheader-buttons">
          <button className="epinbtn-primary generate-btn" onClick={() => setShowGenerateModal(true)}>
            Generate E-Pin
          </button>
          <button className="epinbtn-secondary" onClick={() => setShowTransferModal(true)}>
            Transfer E-Pin
          </button>
        </div>
      </div>

      {/* <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} /> */}
      <Tabs activeTab={activeTab} setActiveTab={setActiveTab} />
      <EpinTable epins={filteredEpins} activeTab={activeTab} />

      {showGenerateModal && (
        <GenerateModal 
          show={showGenerateModal}
          onClose={() => setShowGenerateModal(false)}
          generateAmount={generateAmount}
          setGenerateAmount={setGenerateAmount}
          generateQuantity={generateQuantity}
          setGenerateQuantity={setGenerateQuantity}
          handleGenerateEpin={handleGenerateEpin}
        />
      )}

      {showTransferModal && (
        <TransferModal 
          show={showTransferModal}
          onClose={() => setShowTransferModal(false)}
          selectedEpin={selectedEpin}
          setSelectedEpin={setSelectedEpin}
          transferTo={transferTo}
          setTransferTo={setTransferTo}
          transferNote={transferNote}
          setTransferNote={setTransferNote}
          handleTransferEpin={handleTransferEpin}
          unusedEpins={unusedEpins}
        />
      )}
    </div>
  );
};

export default EpinCenter;
